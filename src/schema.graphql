"""
Autogenerated input type of CreateNote
"""
input CreateNoteInput {
  autotag: [NoteAutotagTypes!]
  body: String!
  callBackAt: ISO8601DateTime

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  document: String
  documentFileName: String
  noteableId: ID!
  noteableType: NoteableTypes!
}

"""
Autogenerated return type of CreateNote
"""
type CreateNotePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]!
  note: Note
}



interface CreatedByUser {
  """
  The child user that triggered the creation of this object
  """
  createdBy: User!
  createdById: Int!
}

type Error {
  key: String!
  message: String!
}

type Facility {
  id: ID!
  location: Location!
  name: String!
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

"""
Represents untyped JSON
"""
scalar JSON


type ListPrice {
  """
  CreatedAt timestamp in UTC
  """
  createdAt: ISO8601DateTime!
  id: ID!
  price: Float!

  """
  UpdatedAt timestamp in UTC
  """
  updatedAt: ISO8601DateTime!
}

type Location {
  address: String
  addressLine2: String
  city: String
  id: ID!
  latitude: Float
  longitude: Float
  stateCode: String!
  stateName: String!
  zipcode: String
}

type Note implements CreatedByUser {
  body: String!
  callBackAt: ISO8601DateTime
  calledBackAt: ISO8601DateTime

  """
  CreatedAt timestamp in UTC
  """
  createdAt: ISO8601DateTime!

  """
  The child user that triggered the creation of this object
  """
  createdBy: User!
  createdById: Int!
  id: ID!

  """
  UpdatedAt timestamp in UTC
  """
  updatedAt: ISO8601DateTime!
}

enum NoteAutotagTypes {
  accounting
  am
  booking_team
  ce_rep
  claims
  creator
  ops_rep
  pod
  shipper
  tracking_pod
}

"""
Record types to which notes may be added.
"""
enum NoteableTypes {
  Shipment
  ShipmentIssue
}

type Shipment {
  activeCxTasks: [Task!]!
  bolReferences: [String!]!
  calculatedMiles: Float
  carrierApplicationId: ID
  carrierCancelationFee: Float
  carrierManager: User
  carrierPerMileFuelRate: Float
  carrierRate: Float
  carrierSpecialInstructions: String
  carrierTotalRate: Float
  characteristics: ShipmentCharacteristics!
  currentCeRep: User
  cxRep: User

  """
  All CX tasks on this shipment
  """
  cxTasks: [Task!]!
  equipmentId: ID!
  hasClaims: Boolean!
  id: ID!
  isBackhaul: Boolean!
  isTonu: Boolean!
  issueSuggestedOwners: [ShipmentIssueSuggestedOwner!]!
  latestListPrice: ListPrice
  notes: [Note!]!
  poReferences: [String!]!
  shipmentIssueIds: [ID!]!
  shipperCancelationFee: Float
  shipperInsuranceRequirement: ShipperInsuranceRequirement!
  shipperMiles: Float
  shipperPerMileFuelRate: Float
  shipperRate: Float
  shipperRateType: ShipperRateTypes
  shipperTotalRate: Float
  shipperTrackingSegment: ShipperTrackingSegment
  specialInstruction: String
  state: ShipmentStates!
  statusDetails: ShipmentStatus!
  stops: [ShipmentStop!]!
  team: Boolean!
  totalPalletCount: Int
  totalWeight: Int
  trackingOverview: TrackingOverview!
  trailerNumber: String
  trailerNumberRequired: Boolean!
  truckNumber: String
  truckNumberRequired: Boolean!
  vin: String
}

type ShipmentCharacteristics {
  backhaulEligible: Boolean!
  bounceCount: Int!
  hasDropTrailerStops: Boolean!
  hazmat: Boolean!
  hot: Boolean!
  mustGo: Boolean!
  rolloverCount: Int!
  sameDaySpot: Boolean!
}

"""
An edge in a connection.
"""
type ShipmentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Shipment
}

type ShipmentIssueCategory {
  id: ID!
  name: String!
}

type ShipmentIssueDefaults {
  defaultOwner: ShipmentIssueFollower
  defaultPriority: Int
  defaultSubscribers: [ShipmentIssueFollower!]!
}

type ShipmentIssueFault {
  fault: String!
  id: ID!
}

"""
Shared type for shipment issue owners and subscribers
"""
type ShipmentIssueFollower {
  email: String
  firstName: String!
  followerId: ID!
  followerType: ShipmentIssueFollowerTypes!
  lastName: String
  nickname: String
}

input ShipmentIssueFollowerInput {
  followerId: ID!
  followerType: ShipmentIssueFollowerTypes!
}

enum ShipmentIssueFollowerTypes {
  Group
  User
}

type ShipmentIssueReason {
  id: ID!
  reason: String!
}

enum ShipmentIssueStates {
  """
  Awaiting response
  """
  awaiting_response

  """
  In progress
  """
  in_progress

  """
  Pending
  """
  pending

  """
  Resolved
  """
  resolved
}

type ShipmentIssueSuggestedOwner {
  owner: ShipmentIssueFollower
  role: String!
}

type ShipmentIssueType {
  category: ShipmentIssueCategory
  categoryId: ID
  description: String
  id: ID!
  name: String!
  priority: Int
  stepsToResolve: String
}

enum ShipmentStates {
  """
  Alerted
  """
  alerted

  """
  Arrived for Delivery
  """
  arrived_for_delivery

  """
  Arrived for Pick Up
  """
  arrived_for_pickup

  """
  Assigned
  """
  assigned

  """
  Canceled
  """
  canceled

  """
  Completed
  """
  completed

  """
  Covered
  """
  covered

  """
  Delivered
  """
  delivered

  """
  Dispatched
  """
  dispatched

  """
  Documents Received
  """
  documents_received

  """
  E-Submitted
  """
  e_submitted

  """
  In Transit
  """
  in_transit

  """
  Invoice Sent
  """
  invoice_sent

  """
  Offered
  """
  offered

  """
  On Hold
  """
  on_hold

  """
  POD Rejected
  """
  pod_rejected

  """
  Quoted
  """
  quoted

  """
  Submitted
  """
  submitted

  """
  Tendered
  """
  tendered

  """
  TONU
  """
  truck_ordered_not_used

  """
  Waterfall Offered
  """
  waterfall_offered
}

type ShipmentStatus {
  """
  Detailed state of shipment (includes custom transit statuses)
  """
  detailedState: String!
  pickupStatus: String!
}

type ShipmentStop {
  activeCeTasks: [Task!]!
  address: String
  addressLine2: String
  appointment: ShipmentStopAppointment!
  arrivedAt: ISO8601DateTime
  billOfLadingReference: String
  city: String
  commodity: String!
  dropTrailer: Boolean!
  facility: Facility!
  id: ID!
  lateReason: String
  latitude: Float
  leftAt: ISO8601DateTime
  longitude: Float
  manualEta: ISO8601DateTime
  note: String
  palletCount: Int
  poReference: String
  project44Eta: ISO8601DateTime
  shipperFacility: ShipperFacility!
  stateCode: String!
  stopSequence: Int!
  stopType: ShipmentStopTypes!
  trailerEmptiedAt: ISO8601DateTime
  weight: Int
  zipcode: String
}

type ShipmentStopAppointment {
  appointmentReference: String
  appointmentType: ShipmentStopAppointmentTypes!
  confirmationReference: String
  confirmedAt: ISO8601DateTime
  confirmedBy: User
  date: String @deprecated(reason: "Use start_at")
  ediAppointmentReasonCode: String
  endAt: ISO8601DateTime
  endAtHasTime: Boolean!
  id: ID!
  isWorkIn: Boolean!
  startAt: ISO8601DateTime
  startAtHasTime: Boolean!
  status: ShipmentStopAppointmentStatuses
  time: String @deprecated(reason: "Use start_at if start_at_has_time? is true")
  timezone: String!
  timezoneShort: String! @deprecated(reason: "Use the iso time above. It includes timezone")
}

enum ShipmentStopAppointmentStatuses {
  """
  Confirmed
  """
  confirmed

  """
  Predicted
  """
  predicted

  """
  Unconfirmed
  """
  unconfirmed
}

enum ShipmentStopAppointmentTypes {
  """
  Appointment
  """
  appointment

  """
  Range
  """
  range
}

enum ShipmentStopRegionTypes {
  """
  Coastal
  """
  C

  """
  Midwest
  """
  MW

  """
  Northeast
  """
  N

  """
  South
  """
  S

  """
  Southeast
  """
  SE

  """
  West
  """
  W
}

enum ShipmentStopTypes {
  """
  Delivery
  """
  delivery

  """
  Pickup
  """
  pickup
}

type ShipperApplication {
  accountManager: User
  carrierInstructions: String
  cohortQuarter: Int
  cohortYear: Int
  createdBy: User
  headquarter: Location
  id: ID!
  isFsmaApproved: Boolean!
  name: String!
  opsCustomerEmail: String
  schedulingInstructions: String
  segment: String
  state: ShipperApplicationStates!
}

enum ShipperApplicationStates {
  """
  Canceled
  """
  canceled

  """
  Active
  """
  confirmed

  """
  Pending
  """
  pending

  """
  Rejected
  """
  rejected

  """
  Suspended
  """
  suspended
}

type ShipperFacility {
  facility: Facility!
  id: ID!
  shipperApplicationId: ID!
  uuid: ID!
}

type ShipperInsuranceRequirement {
  automotiveRequirements: [String!]!
  cargoCoverageRequirements: [String!]!
  shipmentSpecificRequirements: [String!]!
}

enum ShipperRateTypes {
  """
  Contract Backup
  """
  contract_backup

  """
  Contract Primary
  """
  contract_primary

  """
  Spot
  """
  spot
}

type ShipperTrackingSegment {
  description: String
  id: ID!
  level: Int!
}

type Task {
  assignedAt: ISO8601DateTime
  assignedTo: User
  canceledAt: ISO8601DateTime
  completedAt: ISO8601DateTime
  completedBy: User
  dueAt: ISO8601DateTime!
  expiresAt: ISO8601DateTime
  id: ID!
  name: String!
  taskable: Taskable!
  taskableId: ID!
  taskableType: TaskableTypes!
}

"""
Objects which may have tasks assigned to them
"""
union Taskable = Shipment | ShipmentStop

enum TaskableTypes {
  Shipment
  ShipmentStop
}

type TrackingCapabilities {
  keepTruckin: Boolean!
  mobile: Boolean!
  project44: Boolean!
}

type TrackingOverview {
  calculatedTrackingMethod: String!
  carrierApplicationId: ID
  dispatcher: User
  driver: User
  trackingCapabilities: TrackingCapabilities!
  trackingRequirement: String!
  trackingState: TrackingStateEnum!
}

enum TrackingStateEnum {
  currently_tracking
  not_tracking_not_required
  not_tracking_required
  was_tracking
}



type User {
  cellPhone: String
  email: String
  firstName: String
  fullName: String
  id: ID!
  lastName: String
  parentUserId: ID!
  phone: String
  phoneExt: String
}

type Query {
  shipment(id: ID!): Shipment
  shipmentActiveCeTasks(shipmentId: ID!): [Task!]!
  shipmentActiveCxTasks(shipmentId: ID!): [Task!]!
}

type Mutation {
  createNote(
    """
    Parameters for CreateNote
    """
    input: CreateNoteInput!
  ): CreateNotePayload
}