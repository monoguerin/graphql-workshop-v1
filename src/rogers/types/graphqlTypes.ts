/**
  * @note This is an auto-generated file. Do not modify it directly.
  * @see https://devdocs.io/graphql
  * 
  * If you need to update the hooks or definitions in this file: 
  * 1. Edit the .graphql file in this directory with the same name
  * 2. Run `npm run generate:graphql:mp` in the terminal
  */

export type Maybe<T> = T | null | undefined;
export type InputMaybe<T> = T | null | undefined;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: string;
  /** Represents untyped JSON */
  JSON: any;
};

/** Autogenerated input type of CreateNote */
export type ICreateNoteInput = {
  autotag?: InputMaybe<Array<INoteAutotagTypes>>;
  body: Scalars['String'];
  callBackAt?: InputMaybe<Scalars['ISO8601DateTime']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  document?: InputMaybe<Scalars['String']>;
  documentFileName?: InputMaybe<Scalars['String']>;
  noteableId: Scalars['ID'];
  noteableType: INoteableTypes;
};

/** Autogenerated return type of CreateNote */
export type ICreateNotePayload = {
  __typename?: 'CreateNotePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<IError>;
  note?: Maybe<INote>;
};

export type ICreatedByUser = {
  /** The child user that triggered the creation of this object */
  createdBy: IUser;
  createdById: Scalars['Int'];
};

export type IError = {
  __typename?: 'Error';
  key: Scalars['String'];
  message: Scalars['String'];
};

export type IFacility = {
  __typename?: 'Facility';
  id: Scalars['ID'];
  location: ILocation;
  name: Scalars['String'];
};

export type IListPrice = {
  __typename?: 'ListPrice';
  /** CreatedAt timestamp in UTC */
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  price: Scalars['Float'];
  /** UpdatedAt timestamp in UTC */
  updatedAt: Scalars['ISO8601DateTime'];
};

export type ILocation = {
  __typename?: 'Location';
  address?: Maybe<Scalars['String']>;
  addressLine2?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  stateCode: Scalars['String'];
  stateName: Scalars['String'];
  zipcode?: Maybe<Scalars['String']>;
};

export type IMutation = {
  __typename?: 'Mutation';
  createNote?: Maybe<ICreateNotePayload>;
};


export type IMutationCreateNoteArgs = {
  input: ICreateNoteInput;
};

export type INote = ICreatedByUser & {
  __typename?: 'Note';
  body: Scalars['String'];
  callBackAt?: Maybe<Scalars['ISO8601DateTime']>;
  calledBackAt?: Maybe<Scalars['ISO8601DateTime']>;
  /** CreatedAt timestamp in UTC */
  createdAt: Scalars['ISO8601DateTime'];
  /** The child user that triggered the creation of this object */
  createdBy: IUser;
  createdById: Scalars['Int'];
  id: Scalars['ID'];
  /** UpdatedAt timestamp in UTC */
  updatedAt: Scalars['ISO8601DateTime'];
};

export enum INoteAutotagTypes {
  accounting = 'accounting',
  am = 'am',
  booking_team = 'booking_team',
  ce_rep = 'ce_rep',
  claims = 'claims',
  creator = 'creator',
  ops_rep = 'ops_rep',
  pod = 'pod',
  shipper = 'shipper',
  tracking_pod = 'tracking_pod'
}

/** Record types to which notes may be added. */
export enum INoteableTypes {
  Shipment = 'Shipment',
  ShipmentIssue = 'ShipmentIssue'
}

export type IQuery = {
  __typename?: 'Query';
  shipment?: Maybe<IShipment>;
  shipmentActiveCeTasks: Array<ITask>;
  shipmentActiveCxTasks: Array<ITask>;
};


export type IQueryShipmentArgs = {
  id: Scalars['ID'];
};


export type IQueryShipmentActiveCeTasksArgs = {
  shipmentId: Scalars['ID'];
};


export type IQueryShipmentActiveCxTasksArgs = {
  shipmentId: Scalars['ID'];
};

export type IShipment = {
  __typename?: 'Shipment';
  activeCxTasks: Array<ITask>;
  bolReferences: Array<Scalars['String']>;
  calculatedMiles?: Maybe<Scalars['Float']>;
  carrierApplicationId?: Maybe<Scalars['ID']>;
  carrierCancelationFee?: Maybe<Scalars['Float']>;
  carrierManager?: Maybe<IUser>;
  carrierPerMileFuelRate?: Maybe<Scalars['Float']>;
  carrierRate?: Maybe<Scalars['Float']>;
  carrierSpecialInstructions?: Maybe<Scalars['String']>;
  carrierTotalRate?: Maybe<Scalars['Float']>;
  characteristics: IShipmentCharacteristics;
  currentCeRep?: Maybe<IUser>;
  cxRep?: Maybe<IUser>;
  /** All CX tasks on this shipment */
  cxTasks: Array<ITask>;
  equipmentId: Scalars['ID'];
  hasClaims: Scalars['Boolean'];
  id: Scalars['ID'];
  isBackhaul: Scalars['Boolean'];
  isTonu: Scalars['Boolean'];
  issueSuggestedOwners: Array<IShipmentIssueSuggestedOwner>;
  latestListPrice?: Maybe<IListPrice>;
  notes: Array<INote>;
  poReferences: Array<Scalars['String']>;
  shipmentIssueIds: Array<Scalars['ID']>;
  shipperCancelationFee?: Maybe<Scalars['Float']>;
  shipperInsuranceRequirement: IShipperInsuranceRequirement;
  shipperMiles?: Maybe<Scalars['Float']>;
  shipperPerMileFuelRate?: Maybe<Scalars['Float']>;
  shipperRate?: Maybe<Scalars['Float']>;
  shipperRateType?: Maybe<IShipperRateTypes>;
  shipperTotalRate?: Maybe<Scalars['Float']>;
  shipperTrackingSegment?: Maybe<IShipperTrackingSegment>;
  specialInstruction?: Maybe<Scalars['String']>;
  state: IShipmentStates;
  statusDetails: IShipmentStatus;
  stops: Array<IShipmentStop>;
  team: Scalars['Boolean'];
  totalPalletCount?: Maybe<Scalars['Int']>;
  totalWeight?: Maybe<Scalars['Int']>;
  trackingOverview: ITrackingOverview;
  trailerNumber?: Maybe<Scalars['String']>;
  trailerNumberRequired: Scalars['Boolean'];
  truckNumber?: Maybe<Scalars['String']>;
  truckNumberRequired: Scalars['Boolean'];
  vin?: Maybe<Scalars['String']>;
};

export type IShipmentCharacteristics = {
  __typename?: 'ShipmentCharacteristics';
  backhaulEligible: Scalars['Boolean'];
  bounceCount: Scalars['Int'];
  hasDropTrailerStops: Scalars['Boolean'];
  hazmat: Scalars['Boolean'];
  hot: Scalars['Boolean'];
  mustGo: Scalars['Boolean'];
  rolloverCount: Scalars['Int'];
  sameDaySpot: Scalars['Boolean'];
};

/** An edge in a connection. */
export type IShipmentEdge = {
  __typename?: 'ShipmentEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<IShipment>;
};

export type IShipmentIssueCategory = {
  __typename?: 'ShipmentIssueCategory';
  id: Scalars['ID'];
  name: Scalars['String'];
};

export type IShipmentIssueDefaults = {
  __typename?: 'ShipmentIssueDefaults';
  defaultOwner?: Maybe<IShipmentIssueFollower>;
  defaultPriority?: Maybe<Scalars['Int']>;
  defaultSubscribers: Array<IShipmentIssueFollower>;
};

export type IShipmentIssueFault = {
  __typename?: 'ShipmentIssueFault';
  fault: Scalars['String'];
  id: Scalars['ID'];
};

/** Shared type for shipment issue owners and subscribers */
export type IShipmentIssueFollower = {
  __typename?: 'ShipmentIssueFollower';
  email?: Maybe<Scalars['String']>;
  firstName: Scalars['String'];
  followerId: Scalars['ID'];
  followerType: IShipmentIssueFollowerTypes;
  lastName?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
};

export type IShipmentIssueFollowerInput = {
  followerId: Scalars['ID'];
  followerType: IShipmentIssueFollowerTypes;
};

export enum IShipmentIssueFollowerTypes {
  Group = 'Group',
  User = 'User'
}

export type IShipmentIssueReason = {
  __typename?: 'ShipmentIssueReason';
  id: Scalars['ID'];
  reason: Scalars['String'];
};

export enum IShipmentIssueStates {
  /** Awaiting response */
  awaiting_response = 'awaiting_response',
  /** In progress */
  in_progress = 'in_progress',
  /** Pending */
  pending = 'pending',
  /** Resolved */
  resolved = 'resolved'
}

export type IShipmentIssueSuggestedOwner = {
  __typename?: 'ShipmentIssueSuggestedOwner';
  owner?: Maybe<IShipmentIssueFollower>;
  role: Scalars['String'];
};

export type IShipmentIssueType = {
  __typename?: 'ShipmentIssueType';
  category?: Maybe<IShipmentIssueCategory>;
  categoryId?: Maybe<Scalars['ID']>;
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  priority?: Maybe<Scalars['Int']>;
  stepsToResolve?: Maybe<Scalars['String']>;
};

export enum IShipmentStates {
  /** Alerted */
  alerted = 'alerted',
  /** Arrived for Delivery */
  arrived_for_delivery = 'arrived_for_delivery',
  /** Arrived for Pick Up */
  arrived_for_pickup = 'arrived_for_pickup',
  /** Assigned */
  assigned = 'assigned',
  /** Canceled */
  canceled = 'canceled',
  /** Completed */
  completed = 'completed',
  /** Covered */
  covered = 'covered',
  /** Delivered */
  delivered = 'delivered',
  /** Dispatched */
  dispatched = 'dispatched',
  /** Documents Received */
  documents_received = 'documents_received',
  /** E-Submitted */
  e_submitted = 'e_submitted',
  /** In Transit */
  in_transit = 'in_transit',
  /** Invoice Sent */
  invoice_sent = 'invoice_sent',
  /** Offered */
  offered = 'offered',
  /** On Hold */
  on_hold = 'on_hold',
  /** POD Rejected */
  pod_rejected = 'pod_rejected',
  /** Quoted */
  quoted = 'quoted',
  /** Submitted */
  submitted = 'submitted',
  /** Tendered */
  tendered = 'tendered',
  /** TONU */
  truck_ordered_not_used = 'truck_ordered_not_used',
  /** Waterfall Offered */
  waterfall_offered = 'waterfall_offered'
}

export type IShipmentStatus = {
  __typename?: 'ShipmentStatus';
  /** Detailed state of shipment (includes custom transit statuses) */
  detailedState: Scalars['String'];
  pickupStatus: Scalars['String'];
};

export type IShipmentStop = {
  __typename?: 'ShipmentStop';
  activeCeTasks: Array<ITask>;
  address?: Maybe<Scalars['String']>;
  addressLine2?: Maybe<Scalars['String']>;
  appointment: IShipmentStopAppointment;
  arrivedAt?: Maybe<Scalars['ISO8601DateTime']>;
  billOfLadingReference?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  commodity: Scalars['String'];
  dropTrailer: Scalars['Boolean'];
  facility: IFacility;
  id: Scalars['ID'];
  lateReason?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['Float']>;
  leftAt?: Maybe<Scalars['ISO8601DateTime']>;
  longitude?: Maybe<Scalars['Float']>;
  manualEta?: Maybe<Scalars['ISO8601DateTime']>;
  note?: Maybe<Scalars['String']>;
  palletCount?: Maybe<Scalars['Int']>;
  poReference?: Maybe<Scalars['String']>;
  project44Eta?: Maybe<Scalars['ISO8601DateTime']>;
  shipperFacility: IShipperFacility;
  stateCode: Scalars['String'];
  stopSequence: Scalars['Int'];
  stopType: IShipmentStopTypes;
  trailerEmptiedAt?: Maybe<Scalars['ISO8601DateTime']>;
  weight?: Maybe<Scalars['Int']>;
  zipcode?: Maybe<Scalars['String']>;
};

export type IShipmentStopAppointment = {
  __typename?: 'ShipmentStopAppointment';
  appointmentReference?: Maybe<Scalars['String']>;
  appointmentType: IShipmentStopAppointmentTypes;
  confirmationReference?: Maybe<Scalars['String']>;
  confirmedAt?: Maybe<Scalars['ISO8601DateTime']>;
  confirmedBy?: Maybe<IUser>;
  /** @deprecated Use start_at */
  date?: Maybe<Scalars['String']>;
  ediAppointmentReasonCode?: Maybe<Scalars['String']>;
  endAt?: Maybe<Scalars['ISO8601DateTime']>;
  endAtHasTime: Scalars['Boolean'];
  id: Scalars['ID'];
  isWorkIn: Scalars['Boolean'];
  startAt?: Maybe<Scalars['ISO8601DateTime']>;
  startAtHasTime: Scalars['Boolean'];
  status?: Maybe<IShipmentStopAppointmentStatuses>;
  /** @deprecated Use start_at if start_at_has_time? is true */
  time?: Maybe<Scalars['String']>;
  timezone: Scalars['String'];
  /** @deprecated Use the iso time above. It includes timezone */
  timezoneShort: Scalars['String'];
};

export enum IShipmentStopAppointmentStatuses {
  /** Confirmed */
  confirmed = 'confirmed',
  /** Predicted */
  predicted = 'predicted',
  /** Unconfirmed */
  unconfirmed = 'unconfirmed'
}

export enum IShipmentStopAppointmentTypes {
  /** Appointment */
  appointment = 'appointment',
  /** Range */
  range = 'range'
}

export enum IShipmentStopRegionTypes {
  /** Coastal */
  C = 'C',
  /** Midwest */
  MW = 'MW',
  /** Northeast */
  N = 'N',
  /** South */
  S = 'S',
  /** Southeast */
  SE = 'SE',
  /** West */
  W = 'W'
}

export enum IShipmentStopTypes {
  /** Delivery */
  delivery = 'delivery',
  /** Pickup */
  pickup = 'pickup'
}

export type IShipperApplication = {
  __typename?: 'ShipperApplication';
  accountManager?: Maybe<IUser>;
  carrierInstructions?: Maybe<Scalars['String']>;
  cohortQuarter?: Maybe<Scalars['Int']>;
  cohortYear?: Maybe<Scalars['Int']>;
  createdBy?: Maybe<IUser>;
  headquarter?: Maybe<ILocation>;
  id: Scalars['ID'];
  isFsmaApproved: Scalars['Boolean'];
  name: Scalars['String'];
  opsCustomerEmail?: Maybe<Scalars['String']>;
  schedulingInstructions?: Maybe<Scalars['String']>;
  segment?: Maybe<Scalars['String']>;
  state: IShipperApplicationStates;
};

export enum IShipperApplicationStates {
  /** Canceled */
  canceled = 'canceled',
  /** Active */
  confirmed = 'confirmed',
  /** Pending */
  pending = 'pending',
  /** Rejected */
  rejected = 'rejected',
  /** Suspended */
  suspended = 'suspended'
}

export type IShipperFacility = {
  __typename?: 'ShipperFacility';
  facility: IFacility;
  id: Scalars['ID'];
  shipperApplicationId: Scalars['ID'];
  uuid: Scalars['ID'];
};

export type IShipperInsuranceRequirement = {
  __typename?: 'ShipperInsuranceRequirement';
  automotiveRequirements: Array<Scalars['String']>;
  cargoCoverageRequirements: Array<Scalars['String']>;
  shipmentSpecificRequirements: Array<Scalars['String']>;
};

export enum IShipperRateTypes {
  /** Contract Backup */
  contract_backup = 'contract_backup',
  /** Contract Primary */
  contract_primary = 'contract_primary',
  /** Spot */
  spot = 'spot'
}

export type IShipperTrackingSegment = {
  __typename?: 'ShipperTrackingSegment';
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  level: Scalars['Int'];
};

export type ITask = {
  __typename?: 'Task';
  assignedAt?: Maybe<Scalars['ISO8601DateTime']>;
  assignedTo?: Maybe<IUser>;
  canceledAt?: Maybe<Scalars['ISO8601DateTime']>;
  completedAt?: Maybe<Scalars['ISO8601DateTime']>;
  completedBy?: Maybe<IUser>;
  dueAt: Scalars['ISO8601DateTime'];
  expiresAt?: Maybe<Scalars['ISO8601DateTime']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  taskable: ITaskable;
  taskableId: Scalars['ID'];
  taskableType: ITaskableTypes;
};

/** Objects which may have tasks assigned to them */
export type ITaskable = IShipment | IShipmentStop;

export enum ITaskableTypes {
  Shipment = 'Shipment',
  ShipmentStop = 'ShipmentStop'
}

export type ITrackingCapabilities = {
  __typename?: 'TrackingCapabilities';
  keepTruckin: Scalars['Boolean'];
  mobile: Scalars['Boolean'];
  project44: Scalars['Boolean'];
};

export type ITrackingOverview = {
  __typename?: 'TrackingOverview';
  calculatedTrackingMethod: Scalars['String'];
  carrierApplicationId?: Maybe<Scalars['ID']>;
  dispatcher?: Maybe<IUser>;
  driver?: Maybe<IUser>;
  trackingCapabilities: ITrackingCapabilities;
  trackingRequirement: Scalars['String'];
  trackingState: ITrackingStateEnum;
};

export enum ITrackingStateEnum {
  currently_tracking = 'currently_tracking',
  not_tracking_not_required = 'not_tracking_not_required',
  not_tracking_required = 'not_tracking_required',
  was_tracking = 'was_tracking'
}

export type IUser = {
  __typename?: 'User';
  cellPhone?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  lastName?: Maybe<Scalars['String']>;
  parentUserId: Scalars['ID'];
  phone?: Maybe<Scalars['String']>;
  phoneExt?: Maybe<Scalars['String']>;
};
